// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.2
// source: PurchaseList.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Age, ageFromJSON, ageToJSON, CommonRequest, CommonResponse } from "./Common.ts";
import { Timestamp } from "./google/protobuf/timestamp.ts";

export const protobufPackage = "";

export interface PurchaseListRequest {
  head: CommonRequest | undefined;
  age: Age;
}

export interface PurchaseListResponse {
  head: CommonResponse | undefined;
  productList: ProductItem[];
  purchaseList: Purchase[];
}

export interface ProductItem {
  productId: string;
  price: number;
  title: string;
  coin: number;
  description: string;
  icon: string;
  purchaseId: string;
  limit: number;
}

export interface Purchase {
  id: number;
  productId: string;
  count: number;
  expiredate?: Date | undefined;
}

function createBasePurchaseListRequest(): PurchaseListRequest {
  return { head: undefined, age: 0 };
}

export const PurchaseListRequest: MessageFns<PurchaseListRequest> = {
  encode(message: PurchaseListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.head !== undefined) {
      CommonRequest.encode(message.head, writer.uint32(10).fork()).join();
    }
    if (message.age !== 0) {
      writer.uint32(16).int32(message.age);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurchaseListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurchaseListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.head = CommonRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.age = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurchaseListRequest {
    return {
      head: isSet(object.head) ? CommonRequest.fromJSON(object.head) : undefined,
      age: isSet(object.age) ? ageFromJSON(object.age) : 0,
    };
  },

  toJSON(message: PurchaseListRequest): unknown {
    const obj: any = {};
    if (message.head !== undefined) {
      obj.head = CommonRequest.toJSON(message.head);
    }
    if (message.age !== 0) {
      obj.age = ageToJSON(message.age);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PurchaseListRequest>, I>>(base?: I): PurchaseListRequest {
    return PurchaseListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PurchaseListRequest>, I>>(object: I): PurchaseListRequest {
    const message = createBasePurchaseListRequest();
    message.head = (object.head !== undefined && object.head !== null)
      ? CommonRequest.fromPartial(object.head)
      : undefined;
    message.age = object.age ?? 0;
    return message;
  },
};

function createBasePurchaseListResponse(): PurchaseListResponse {
  return { head: undefined, productList: [], purchaseList: [] };
}

export const PurchaseListResponse: MessageFns<PurchaseListResponse> = {
  encode(message: PurchaseListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.head !== undefined) {
      CommonResponse.encode(message.head, writer.uint32(10).fork()).join();
    }
    for (const v of message.productList) {
      ProductItem.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.purchaseList) {
      Purchase.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurchaseListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurchaseListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.head = CommonResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productList.push(ProductItem.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.purchaseList.push(Purchase.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurchaseListResponse {
    return {
      head: isSet(object.head) ? CommonResponse.fromJSON(object.head) : undefined,
      productList: globalThis.Array.isArray(object?.productList)
        ? object.productList.map((e: any) => ProductItem.fromJSON(e))
        : [],
      purchaseList: globalThis.Array.isArray(object?.purchaseList)
        ? object.purchaseList.map((e: any) => Purchase.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PurchaseListResponse): unknown {
    const obj: any = {};
    if (message.head !== undefined) {
      obj.head = CommonResponse.toJSON(message.head);
    }
    if (message.productList?.length) {
      obj.productList = message.productList.map((e) => ProductItem.toJSON(e));
    }
    if (message.purchaseList?.length) {
      obj.purchaseList = message.purchaseList.map((e) => Purchase.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PurchaseListResponse>, I>>(base?: I): PurchaseListResponse {
    return PurchaseListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PurchaseListResponse>, I>>(object: I): PurchaseListResponse {
    const message = createBasePurchaseListResponse();
    message.head = (object.head !== undefined && object.head !== null)
      ? CommonResponse.fromPartial(object.head)
      : undefined;
    message.productList = object.productList?.map((e) => ProductItem.fromPartial(e)) || [];
    message.purchaseList = object.purchaseList?.map((e) => Purchase.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProductItem(): ProductItem {
  return { productId: "", price: 0, title: "", coin: 0, description: "", icon: "", purchaseId: "", limit: 0 };
}

export const ProductItem: MessageFns<ProductItem> = {
  encode(message: ProductItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.price !== 0) {
      writer.uint32(21).float(message.price);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.coin !== 0) {
      writer.uint32(32).int32(message.coin);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.icon !== "") {
      writer.uint32(50).string(message.icon);
    }
    if (message.purchaseId !== "") {
      writer.uint32(58).string(message.purchaseId);
    }
    if (message.limit !== 0) {
      writer.uint32(64).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.price = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.coin = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.purchaseId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductItem {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      coin: isSet(object.coin) ? globalThis.Number(object.coin) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      purchaseId: isSet(object.purchaseId) ? globalThis.String(object.purchaseId) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: ProductItem): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.coin !== 0) {
      obj.coin = Math.round(message.coin);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.purchaseId !== "") {
      obj.purchaseId = message.purchaseId;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductItem>, I>>(base?: I): ProductItem {
    return ProductItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductItem>, I>>(object: I): ProductItem {
    const message = createBaseProductItem();
    message.productId = object.productId ?? "";
    message.price = object.price ?? 0;
    message.title = object.title ?? "";
    message.coin = object.coin ?? 0;
    message.description = object.description ?? "";
    message.icon = object.icon ?? "";
    message.purchaseId = object.purchaseId ?? "";
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBasePurchase(): Purchase {
  return { id: 0, productId: "", count: 0, expiredate: undefined };
}

export const Purchase: MessageFns<Purchase> = {
  encode(message: Purchase, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    if (message.count !== 0) {
      writer.uint32(24).int32(message.count);
    }
    if (message.expiredate !== undefined) {
      Timestamp.encode(toTimestamp(message.expiredate), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Purchase {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurchase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expiredate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Purchase {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      expiredate: isSet(object.expiredate) ? fromJsonTimestamp(object.expiredate) : undefined,
    };
  },

  toJSON(message: Purchase): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.expiredate !== undefined) {
      obj.expiredate = message.expiredate.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Purchase>, I>>(base?: I): Purchase {
    return Purchase.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Purchase>, I>>(object: I): Purchase {
    const message = createBasePurchase();
    message.id = object.id ?? 0;
    message.productId = object.productId ?? "";
    message.count = object.count ?? 0;
    message.expiredate = object.expiredate ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
