// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.2
// source: UserHome.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CommonRequest, CommonResponse, ItemData } from "./Common.ts";
import { Timestamp } from "./google/protobuf/timestamp.ts";

export const protobufPackage = "";

export enum PresentType {
  PRESENT_TYPE_PRESENT = 0,
  PRESENT_TYPE_PRESENT_OPENED = 1,
  PRESENT_TYPE_LOGIN_BONUS = 2,
  PRESENT_TYPE_LOGIN_BONUS_OPENED = 3,
  UNRECOGNIZED = -1,
}

export function presentTypeFromJSON(object: any): PresentType {
  switch (object) {
    case 0:
    case "PRESENT_TYPE_PRESENT":
      return PresentType.PRESENT_TYPE_PRESENT;
    case 1:
    case "PRESENT_TYPE_PRESENT_OPENED":
      return PresentType.PRESENT_TYPE_PRESENT_OPENED;
    case 2:
    case "PRESENT_TYPE_LOGIN_BONUS":
      return PresentType.PRESENT_TYPE_LOGIN_BONUS;
    case 3:
    case "PRESENT_TYPE_LOGIN_BONUS_OPENED":
      return PresentType.PRESENT_TYPE_LOGIN_BONUS_OPENED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PresentType.UNRECOGNIZED;
  }
}

export function presentTypeToJSON(object: PresentType): string {
  switch (object) {
    case PresentType.PRESENT_TYPE_PRESENT:
      return "PRESENT_TYPE_PRESENT";
    case PresentType.PRESENT_TYPE_PRESENT_OPENED:
      return "PRESENT_TYPE_PRESENT_OPENED";
    case PresentType.PRESENT_TYPE_LOGIN_BONUS:
      return "PRESENT_TYPE_LOGIN_BONUS";
    case PresentType.PRESENT_TYPE_LOGIN_BONUS_OPENED:
      return "PRESENT_TYPE_LOGIN_BONUS_OPENED";
    case PresentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface UserHomeRequest {
  head: CommonRequest | undefined;
  sendHeart: boolean;
}

export interface UserHomeResponse {
  head: CommonResponse | undefined;
  loginbonusNum: number;
  presentboxNum: number;
  loginbonusList: PresentData[];
  friendWordList: string[];
  heartSendTime?: Date | undefined;
  friendRecvRequestTime?: Date | undefined;
  friendAddTime?: Date | undefined;
  offerList: Offer[];
  latestNewsTime?: Date | undefined;
}

export interface PresentData {
  presentId: number;
  presentType: PresentType;
  createTime: Date | undefined;
  expireTime: Date | undefined;
  itemdata: ItemData | undefined;
  title: string;
  description: string;
}

export interface Offer {
  id: string;
  purchaseId: string;
  title: string;
  startTime: Date | undefined;
  endTime: Date | undefined;
  button: string;
  image: string;
  ornaments: string;
}

function createBaseUserHomeRequest(): UserHomeRequest {
  return { head: undefined, sendHeart: false };
}

export const UserHomeRequest: MessageFns<UserHomeRequest> = {
  encode(message: UserHomeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.head !== undefined) {
      CommonRequest.encode(message.head, writer.uint32(10).fork()).join();
    }
    if (message.sendHeart !== false) {
      writer.uint32(16).bool(message.sendHeart);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserHomeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserHomeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.head = CommonRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sendHeart = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserHomeRequest {
    return {
      head: isSet(object.head) ? CommonRequest.fromJSON(object.head) : undefined,
      sendHeart: isSet(object.sendHeart) ? globalThis.Boolean(object.sendHeart) : false,
    };
  },

  toJSON(message: UserHomeRequest): unknown {
    const obj: any = {};
    if (message.head !== undefined) {
      obj.head = CommonRequest.toJSON(message.head);
    }
    if (message.sendHeart !== false) {
      obj.sendHeart = message.sendHeart;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserHomeRequest>, I>>(base?: I): UserHomeRequest {
    return UserHomeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserHomeRequest>, I>>(object: I): UserHomeRequest {
    const message = createBaseUserHomeRequest();
    message.head = (object.head !== undefined && object.head !== null)
      ? CommonRequest.fromPartial(object.head)
      : undefined;
    message.sendHeart = object.sendHeart ?? false;
    return message;
  },
};

function createBaseUserHomeResponse(): UserHomeResponse {
  return {
    head: undefined,
    loginbonusNum: 0,
    presentboxNum: 0,
    loginbonusList: [],
    friendWordList: [],
    heartSendTime: undefined,
    friendRecvRequestTime: undefined,
    friendAddTime: undefined,
    offerList: [],
    latestNewsTime: undefined,
  };
}

export const UserHomeResponse: MessageFns<UserHomeResponse> = {
  encode(message: UserHomeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.head !== undefined) {
      CommonResponse.encode(message.head, writer.uint32(10).fork()).join();
    }
    if (message.loginbonusNum !== 0) {
      writer.uint32(16).int32(message.loginbonusNum);
    }
    if (message.presentboxNum !== 0) {
      writer.uint32(24).int32(message.presentboxNum);
    }
    for (const v of message.loginbonusList) {
      PresentData.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.friendWordList) {
      writer.uint32(42).string(v!);
    }
    if (message.heartSendTime !== undefined) {
      Timestamp.encode(toTimestamp(message.heartSendTime), writer.uint32(50).fork()).join();
    }
    if (message.friendRecvRequestTime !== undefined) {
      Timestamp.encode(toTimestamp(message.friendRecvRequestTime), writer.uint32(58).fork()).join();
    }
    if (message.friendAddTime !== undefined) {
      Timestamp.encode(toTimestamp(message.friendAddTime), writer.uint32(66).fork()).join();
    }
    for (const v of message.offerList) {
      Offer.encode(v!, writer.uint32(74).fork()).join();
    }
    if (message.latestNewsTime !== undefined) {
      Timestamp.encode(toTimestamp(message.latestNewsTime), writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserHomeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserHomeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.head = CommonResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.loginbonusNum = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.presentboxNum = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.loginbonusList.push(PresentData.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.friendWordList.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.heartSendTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.friendRecvRequestTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.friendAddTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.offerList.push(Offer.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.latestNewsTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserHomeResponse {
    return {
      head: isSet(object.head) ? CommonResponse.fromJSON(object.head) : undefined,
      loginbonusNum: isSet(object.loginbonusNum) ? globalThis.Number(object.loginbonusNum) : 0,
      presentboxNum: isSet(object.presentboxNum) ? globalThis.Number(object.presentboxNum) : 0,
      loginbonusList: globalThis.Array.isArray(object?.loginbonusList)
        ? object.loginbonusList.map((e: any) => PresentData.fromJSON(e))
        : [],
      friendWordList: globalThis.Array.isArray(object?.friendWordList)
        ? object.friendWordList.map((e: any) => globalThis.String(e))
        : [],
      heartSendTime: isSet(object.heartSendTime) ? fromJsonTimestamp(object.heartSendTime) : undefined,
      friendRecvRequestTime: isSet(object.friendRecvRequestTime)
        ? fromJsonTimestamp(object.friendRecvRequestTime)
        : undefined,
      friendAddTime: isSet(object.friendAddTime) ? fromJsonTimestamp(object.friendAddTime) : undefined,
      offerList: globalThis.Array.isArray(object?.offerList) ? object.offerList.map((e: any) => Offer.fromJSON(e)) : [],
      latestNewsTime: isSet(object.latestNewsTime) ? fromJsonTimestamp(object.latestNewsTime) : undefined,
    };
  },

  toJSON(message: UserHomeResponse): unknown {
    const obj: any = {};
    if (message.head !== undefined) {
      obj.head = CommonResponse.toJSON(message.head);
    }
    if (message.loginbonusNum !== 0) {
      obj.loginbonusNum = Math.round(message.loginbonusNum);
    }
    if (message.presentboxNum !== 0) {
      obj.presentboxNum = Math.round(message.presentboxNum);
    }
    if (message.loginbonusList?.length) {
      obj.loginbonusList = message.loginbonusList.map((e) => PresentData.toJSON(e));
    }
    if (message.friendWordList?.length) {
      obj.friendWordList = message.friendWordList;
    }
    if (message.heartSendTime !== undefined) {
      obj.heartSendTime = message.heartSendTime.toISOString();
    }
    if (message.friendRecvRequestTime !== undefined) {
      obj.friendRecvRequestTime = message.friendRecvRequestTime.toISOString();
    }
    if (message.friendAddTime !== undefined) {
      obj.friendAddTime = message.friendAddTime.toISOString();
    }
    if (message.offerList?.length) {
      obj.offerList = message.offerList.map((e) => Offer.toJSON(e));
    }
    if (message.latestNewsTime !== undefined) {
      obj.latestNewsTime = message.latestNewsTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserHomeResponse>, I>>(base?: I): UserHomeResponse {
    return UserHomeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserHomeResponse>, I>>(object: I): UserHomeResponse {
    const message = createBaseUserHomeResponse();
    message.head = (object.head !== undefined && object.head !== null)
      ? CommonResponse.fromPartial(object.head)
      : undefined;
    message.loginbonusNum = object.loginbonusNum ?? 0;
    message.presentboxNum = object.presentboxNum ?? 0;
    message.loginbonusList = object.loginbonusList?.map((e) => PresentData.fromPartial(e)) || [];
    message.friendWordList = object.friendWordList?.map((e) => e) || [];
    message.heartSendTime = object.heartSendTime ?? undefined;
    message.friendRecvRequestTime = object.friendRecvRequestTime ?? undefined;
    message.friendAddTime = object.friendAddTime ?? undefined;
    message.offerList = object.offerList?.map((e) => Offer.fromPartial(e)) || [];
    message.latestNewsTime = object.latestNewsTime ?? undefined;
    return message;
  },
};

function createBasePresentData(): PresentData {
  return {
    presentId: 0,
    presentType: 0,
    createTime: undefined,
    expireTime: undefined,
    itemdata: undefined,
    title: "",
    description: "",
  };
}

export const PresentData: MessageFns<PresentData> = {
  encode(message: PresentData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.presentId !== 0) {
      writer.uint32(8).int32(message.presentId);
    }
    if (message.presentType !== 0) {
      writer.uint32(16).int32(message.presentType);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(34).fork()).join();
    }
    if (message.itemdata !== undefined) {
      ItemData.encode(message.itemdata, writer.uint32(42).fork()).join();
    }
    if (message.title !== "") {
      writer.uint32(50).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PresentData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePresentData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.presentId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.presentType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.itemdata = ItemData.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PresentData {
    return {
      presentId: isSet(object.presentId) ? globalThis.Number(object.presentId) : 0,
      presentType: isSet(object.presentType) ? presentTypeFromJSON(object.presentType) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      itemdata: isSet(object.itemdata) ? ItemData.fromJSON(object.itemdata) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: PresentData): unknown {
    const obj: any = {};
    if (message.presentId !== 0) {
      obj.presentId = Math.round(message.presentId);
    }
    if (message.presentType !== 0) {
      obj.presentType = presentTypeToJSON(message.presentType);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.itemdata !== undefined) {
      obj.itemdata = ItemData.toJSON(message.itemdata);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PresentData>, I>>(base?: I): PresentData {
    return PresentData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PresentData>, I>>(object: I): PresentData {
    const message = createBasePresentData();
    message.presentId = object.presentId ?? 0;
    message.presentType = object.presentType ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.itemdata = (object.itemdata !== undefined && object.itemdata !== null)
      ? ItemData.fromPartial(object.itemdata)
      : undefined;
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseOffer(): Offer {
  return {
    id: "",
    purchaseId: "",
    title: "",
    startTime: undefined,
    endTime: undefined,
    button: "",
    image: "",
    ornaments: "",
  };
}

export const Offer: MessageFns<Offer> = {
  encode(message: Offer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.purchaseId !== "") {
      writer.uint32(18).string(message.purchaseId);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(34).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(42).fork()).join();
    }
    if (message.button !== "") {
      writer.uint32(50).string(message.button);
    }
    if (message.image !== "") {
      writer.uint32(58).string(message.image);
    }
    if (message.ornaments !== "") {
      writer.uint32(66).string(message.ornaments);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Offer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOffer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.purchaseId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.button = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.ornaments = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Offer {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      purchaseId: isSet(object.purchaseId) ? globalThis.String(object.purchaseId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      button: isSet(object.button) ? globalThis.String(object.button) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      ornaments: isSet(object.ornaments) ? globalThis.String(object.ornaments) : "",
    };
  },

  toJSON(message: Offer): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.purchaseId !== "") {
      obj.purchaseId = message.purchaseId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.button !== "") {
      obj.button = message.button;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.ornaments !== "") {
      obj.ornaments = message.ornaments;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Offer>, I>>(base?: I): Offer {
    return Offer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Offer>, I>>(object: I): Offer {
    const message = createBaseOffer();
    message.id = object.id ?? "";
    message.purchaseId = object.purchaseId ?? "";
    message.title = object.title ?? "";
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.button = object.button ?? "";
    message.image = object.image ?? "";
    message.ornaments = object.ornaments ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
