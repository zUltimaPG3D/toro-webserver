// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.2
// source: PresentList.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  CommonRequest,
  CommonResponse,
  PresentData,
  PresentType,
  presentTypeFromJSON,
  presentTypeToJSON,
} from "./Common.ts";

export const protobufPackage = "";

export interface PresentListRequest {
  head: CommonRequest | undefined;
  type: PresentType;
  page: number;
}

export interface PresentListResponse {
  head: CommonResponse | undefined;
  presentList: PresentData[];
}

function createBasePresentListRequest(): PresentListRequest {
  return { head: undefined, type: 0, page: 0 };
}

export const PresentListRequest: MessageFns<PresentListRequest> = {
  encode(message: PresentListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.head !== undefined) {
      CommonRequest.encode(message.head, writer.uint32(10).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PresentListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePresentListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.head = CommonRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PresentListRequest {
    return {
      head: isSet(object.head) ? CommonRequest.fromJSON(object.head) : undefined,
      type: isSet(object.type) ? presentTypeFromJSON(object.type) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
    };
  },

  toJSON(message: PresentListRequest): unknown {
    const obj: any = {};
    if (message.head !== undefined) {
      obj.head = CommonRequest.toJSON(message.head);
    }
    if (message.type !== 0) {
      obj.type = presentTypeToJSON(message.type);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PresentListRequest>, I>>(base?: I): PresentListRequest {
    return PresentListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PresentListRequest>, I>>(object: I): PresentListRequest {
    const message = createBasePresentListRequest();
    message.head = (object.head !== undefined && object.head !== null)
      ? CommonRequest.fromPartial(object.head)
      : undefined;
    message.type = object.type ?? 0;
    message.page = object.page ?? 0;
    return message;
  },
};

function createBasePresentListResponse(): PresentListResponse {
  return { head: undefined, presentList: [] };
}

export const PresentListResponse: MessageFns<PresentListResponse> = {
  encode(message: PresentListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.head !== undefined) {
      CommonResponse.encode(message.head, writer.uint32(10).fork()).join();
    }
    for (const v of message.presentList) {
      PresentData.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PresentListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePresentListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.head = CommonResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.presentList.push(PresentData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PresentListResponse {
    return {
      head: isSet(object.head) ? CommonResponse.fromJSON(object.head) : undefined,
      presentList: globalThis.Array.isArray(object?.presentList)
        ? object.presentList.map((e: any) => PresentData.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PresentListResponse): unknown {
    const obj: any = {};
    if (message.head !== undefined) {
      obj.head = CommonResponse.toJSON(message.head);
    }
    if (message.presentList?.length) {
      obj.presentList = message.presentList.map((e) => PresentData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PresentListResponse>, I>>(base?: I): PresentListResponse {
    return PresentListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PresentListResponse>, I>>(object: I): PresentListResponse {
    const message = createBasePresentListResponse();
    message.head = (object.head !== undefined && object.head !== null)
      ? CommonResponse.fromPartial(object.head)
      : undefined;
    message.presentList = object.presentList?.map((e) => PresentData.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
