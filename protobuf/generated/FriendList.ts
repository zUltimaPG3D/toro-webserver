// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.2
// source: FriendList.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CommonRequest, CommonResponse } from "./Common.ts";
import { Timestamp } from "./google/protobuf/timestamp.ts";

export const protobufPackage = "";

export enum FriendStatus {
  FRIEND_STATUS_NONE = 0,
  FRIEND_STATUS_FRIEND = 1,
  FRIEND_STATUS_SEND_REQUEST = 2,
  FRIEND_STATUS_RECV_REQUEST = 3,
  FRIEND_STATUS_BLOCKED = 4,
  FRIEND_STATUS_OWN = 5,
  UNRECOGNIZED = -1,
}

export function friendStatusFromJSON(object: any): FriendStatus {
  switch (object) {
    case 0:
    case "FRIEND_STATUS_NONE":
      return FriendStatus.FRIEND_STATUS_NONE;
    case 1:
    case "FRIEND_STATUS_FRIEND":
      return FriendStatus.FRIEND_STATUS_FRIEND;
    case 2:
    case "FRIEND_STATUS_SEND_REQUEST":
      return FriendStatus.FRIEND_STATUS_SEND_REQUEST;
    case 3:
    case "FRIEND_STATUS_RECV_REQUEST":
      return FriendStatus.FRIEND_STATUS_RECV_REQUEST;
    case 4:
    case "FRIEND_STATUS_BLOCKED":
      return FriendStatus.FRIEND_STATUS_BLOCKED;
    case 5:
    case "FRIEND_STATUS_OWN":
      return FriendStatus.FRIEND_STATUS_OWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FriendStatus.UNRECOGNIZED;
  }
}

export function friendStatusToJSON(object: FriendStatus): string {
  switch (object) {
    case FriendStatus.FRIEND_STATUS_NONE:
      return "FRIEND_STATUS_NONE";
    case FriendStatus.FRIEND_STATUS_FRIEND:
      return "FRIEND_STATUS_FRIEND";
    case FriendStatus.FRIEND_STATUS_SEND_REQUEST:
      return "FRIEND_STATUS_SEND_REQUEST";
    case FriendStatus.FRIEND_STATUS_RECV_REQUEST:
      return "FRIEND_STATUS_RECV_REQUEST";
    case FriendStatus.FRIEND_STATUS_BLOCKED:
      return "FRIEND_STATUS_BLOCKED";
    case FriendStatus.FRIEND_STATUS_OWN:
      return "FRIEND_STATUS_OWN";
    case FriendStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FriendListRequest {
  head: CommonRequest | undefined;
  status: FriendStatus;
}

export interface FriendListResponse {
  head: CommonResponse | undefined;
  data: SupportAccount[];
}

export interface FriendSearchRequest {
  head: CommonRequest | undefined;
  publicId: string;
}

export interface FriendSearchResponse {
  head: CommonResponse | undefined;
  data: SupportAccount[];
}

export interface SupportAccount {
  userId?: number | undefined;
  publicId: string;
  playerName: string;
  playerData: string;
  updateTime?: Date | undefined;
  status: FriendStatus;
}

function createBaseFriendListRequest(): FriendListRequest {
  return { head: undefined, status: 0 };
}

export const FriendListRequest: MessageFns<FriendListRequest> = {
  encode(message: FriendListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.head !== undefined) {
      CommonRequest.encode(message.head, writer.uint32(10).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FriendListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.head = CommonRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendListRequest {
    return {
      head: isSet(object.head) ? CommonRequest.fromJSON(object.head) : undefined,
      status: isSet(object.status) ? friendStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: FriendListRequest): unknown {
    const obj: any = {};
    if (message.head !== undefined) {
      obj.head = CommonRequest.toJSON(message.head);
    }
    if (message.status !== 0) {
      obj.status = friendStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FriendListRequest>, I>>(base?: I): FriendListRequest {
    return FriendListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FriendListRequest>, I>>(object: I): FriendListRequest {
    const message = createBaseFriendListRequest();
    message.head = (object.head !== undefined && object.head !== null)
      ? CommonRequest.fromPartial(object.head)
      : undefined;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseFriendListResponse(): FriendListResponse {
  return { head: undefined, data: [] };
}

export const FriendListResponse: MessageFns<FriendListResponse> = {
  encode(message: FriendListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.head !== undefined) {
      CommonResponse.encode(message.head, writer.uint32(10).fork()).join();
    }
    for (const v of message.data) {
      SupportAccount.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FriendListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.head = CommonResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data.push(SupportAccount.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendListResponse {
    return {
      head: isSet(object.head) ? CommonResponse.fromJSON(object.head) : undefined,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => SupportAccount.fromJSON(e)) : [],
    };
  },

  toJSON(message: FriendListResponse): unknown {
    const obj: any = {};
    if (message.head !== undefined) {
      obj.head = CommonResponse.toJSON(message.head);
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => SupportAccount.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FriendListResponse>, I>>(base?: I): FriendListResponse {
    return FriendListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FriendListResponse>, I>>(object: I): FriendListResponse {
    const message = createBaseFriendListResponse();
    message.head = (object.head !== undefined && object.head !== null)
      ? CommonResponse.fromPartial(object.head)
      : undefined;
    message.data = object.data?.map((e) => SupportAccount.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFriendSearchRequest(): FriendSearchRequest {
  return { head: undefined, publicId: "" };
}

export const FriendSearchRequest: MessageFns<FriendSearchRequest> = {
  encode(message: FriendSearchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.head !== undefined) {
      CommonRequest.encode(message.head, writer.uint32(10).fork()).join();
    }
    if (message.publicId !== "") {
      writer.uint32(18).string(message.publicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FriendSearchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendSearchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.head = CommonRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendSearchRequest {
    return {
      head: isSet(object.head) ? CommonRequest.fromJSON(object.head) : undefined,
      publicId: isSet(object.publicId) ? globalThis.String(object.publicId) : "",
    };
  },

  toJSON(message: FriendSearchRequest): unknown {
    const obj: any = {};
    if (message.head !== undefined) {
      obj.head = CommonRequest.toJSON(message.head);
    }
    if (message.publicId !== "") {
      obj.publicId = message.publicId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FriendSearchRequest>, I>>(base?: I): FriendSearchRequest {
    return FriendSearchRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FriendSearchRequest>, I>>(object: I): FriendSearchRequest {
    const message = createBaseFriendSearchRequest();
    message.head = (object.head !== undefined && object.head !== null)
      ? CommonRequest.fromPartial(object.head)
      : undefined;
    message.publicId = object.publicId ?? "";
    return message;
  },
};

function createBaseFriendSearchResponse(): FriendSearchResponse {
  return { head: undefined, data: [] };
}

export const FriendSearchResponse: MessageFns<FriendSearchResponse> = {
  encode(message: FriendSearchResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.head !== undefined) {
      CommonResponse.encode(message.head, writer.uint32(10).fork()).join();
    }
    for (const v of message.data) {
      SupportAccount.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FriendSearchResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendSearchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.head = CommonResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data.push(SupportAccount.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendSearchResponse {
    return {
      head: isSet(object.head) ? CommonResponse.fromJSON(object.head) : undefined,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => SupportAccount.fromJSON(e)) : [],
    };
  },

  toJSON(message: FriendSearchResponse): unknown {
    const obj: any = {};
    if (message.head !== undefined) {
      obj.head = CommonResponse.toJSON(message.head);
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => SupportAccount.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FriendSearchResponse>, I>>(base?: I): FriendSearchResponse {
    return FriendSearchResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FriendSearchResponse>, I>>(object: I): FriendSearchResponse {
    const message = createBaseFriendSearchResponse();
    message.head = (object.head !== undefined && object.head !== null)
      ? CommonResponse.fromPartial(object.head)
      : undefined;
    message.data = object.data?.map((e) => SupportAccount.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSupportAccount(): SupportAccount {
  return { userId: undefined, publicId: "", playerName: "", playerData: "", updateTime: undefined, status: 0 };
}

export const SupportAccount: MessageFns<SupportAccount> = {
  encode(message: SupportAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== undefined) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.publicId !== "") {
      writer.uint32(18).string(message.publicId);
    }
    if (message.playerName !== "") {
      writer.uint32(26).string(message.playerName);
    }
    if (message.playerData !== "") {
      writer.uint32(34).string(message.playerData);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SupportAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSupportAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.playerName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.playerData = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SupportAccount {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : undefined,
      publicId: isSet(object.publicId) ? globalThis.String(object.publicId) : "",
      playerName: isSet(object.playerName) ? globalThis.String(object.playerName) : "",
      playerData: isSet(object.playerData) ? globalThis.String(object.playerData) : "",
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      status: isSet(object.status) ? friendStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: SupportAccount): unknown {
    const obj: any = {};
    if (message.userId !== undefined) {
      obj.userId = Math.round(message.userId);
    }
    if (message.publicId !== "") {
      obj.publicId = message.publicId;
    }
    if (message.playerName !== "") {
      obj.playerName = message.playerName;
    }
    if (message.playerData !== "") {
      obj.playerData = message.playerData;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.status !== 0) {
      obj.status = friendStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SupportAccount>, I>>(base?: I): SupportAccount {
    return SupportAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SupportAccount>, I>>(object: I): SupportAccount {
    const message = createBaseSupportAccount();
    message.userId = object.userId ?? undefined;
    message.publicId = object.publicId ?? "";
    message.playerName = object.playerName ?? "";
    message.playerData = object.playerData ?? "";
    message.updateTime = object.updateTime ?? undefined;
    message.status = object.status ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
