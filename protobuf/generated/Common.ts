// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.2
// source: Common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp.ts";

export const protobufPackage = "";

export enum Platform {
  PLATFORM_EDITOR = 0,
  PLATFORM_APPLE = 1,
  PLATFORM_GOOGLE = 2,
  UNRECOGNIZED = -1,
}

export function platformFromJSON(object: any): Platform {
  switch (object) {
    case 0:
    case "PLATFORM_EDITOR":
      return Platform.PLATFORM_EDITOR;
    case 1:
    case "PLATFORM_APPLE":
      return Platform.PLATFORM_APPLE;
    case 2:
    case "PLATFORM_GOOGLE":
      return Platform.PLATFORM_GOOGLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Platform.UNRECOGNIZED;
  }
}

export function platformToJSON(object: Platform): string {
  switch (object) {
    case Platform.PLATFORM_EDITOR:
      return "PLATFORM_EDITOR";
    case Platform.PLATFORM_APPLE:
      return "PLATFORM_APPLE";
    case Platform.PLATFORM_GOOGLE:
      return "PLATFORM_GOOGLE";
    case Platform.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ItemType {
  ITEM_TYPE_NONE = 0,
  ITEM_TYPE_ACCOUNT_PROP = 1,
  ITEM_TYPE_ITEM = 2,
  ITEM_TYPE_REWARD_PACK = 3,
  UNRECOGNIZED = -1,
}

export function itemTypeFromJSON(object: any): ItemType {
  switch (object) {
    case 0:
    case "ITEM_TYPE_NONE":
      return ItemType.ITEM_TYPE_NONE;
    case 1:
    case "ITEM_TYPE_ACCOUNT_PROP":
      return ItemType.ITEM_TYPE_ACCOUNT_PROP;
    case 2:
    case "ITEM_TYPE_ITEM":
      return ItemType.ITEM_TYPE_ITEM;
    case 3:
    case "ITEM_TYPE_REWARD_PACK":
      return ItemType.ITEM_TYPE_REWARD_PACK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ItemType.UNRECOGNIZED;
  }
}

export function itemTypeToJSON(object: ItemType): string {
  switch (object) {
    case ItemType.ITEM_TYPE_NONE:
      return "ITEM_TYPE_NONE";
    case ItemType.ITEM_TYPE_ACCOUNT_PROP:
      return "ITEM_TYPE_ACCOUNT_PROP";
    case ItemType.ITEM_TYPE_ITEM:
      return "ITEM_TYPE_ITEM";
    case ItemType.ITEM_TYPE_REWARD_PACK:
      return "ITEM_TYPE_REWARD_PACK";
    case ItemType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Age {
  AGE_NONE = 0,
  AGE_UNDER_16 = 1,
  AGE_UNDER_20 = 2,
  AGE_NO_LIMIT = 3,
  UNRECOGNIZED = -1,
}

export function ageFromJSON(object: any): Age {
  switch (object) {
    case 0:
    case "AGE_NONE":
      return Age.AGE_NONE;
    case 1:
    case "AGE_UNDER_16":
      return Age.AGE_UNDER_16;
    case 2:
    case "AGE_UNDER_20":
      return Age.AGE_UNDER_20;
    case 3:
    case "AGE_NO_LIMIT":
      return Age.AGE_NO_LIMIT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Age.UNRECOGNIZED;
  }
}

export function ageToJSON(object: Age): string {
  switch (object) {
    case Age.AGE_NONE:
      return "AGE_NONE";
    case Age.AGE_UNDER_16:
      return "AGE_UNDER_16";
    case Age.AGE_UNDER_20:
      return "AGE_UNDER_20";
    case Age.AGE_NO_LIMIT:
      return "AGE_NO_LIMIT";
    case Age.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PresentType {
  PRESENT_TYPE_PRESENT = 0,
  PRESENT_TYPE_PRESENT_OPENED = 1,
  PRESENT_TYPE_LOGIN_BONUS = 2,
  PRESENT_TYPE_LOGIN_BONUS_OPENED = 3,
  UNRECOGNIZED = -1,
}

export function presentTypeFromJSON(object: any): PresentType {
  switch (object) {
    case 0:
    case "PRESENT_TYPE_PRESENT":
      return PresentType.PRESENT_TYPE_PRESENT;
    case 1:
    case "PRESENT_TYPE_PRESENT_OPENED":
      return PresentType.PRESENT_TYPE_PRESENT_OPENED;
    case 2:
    case "PRESENT_TYPE_LOGIN_BONUS":
      return PresentType.PRESENT_TYPE_LOGIN_BONUS;
    case 3:
    case "PRESENT_TYPE_LOGIN_BONUS_OPENED":
      return PresentType.PRESENT_TYPE_LOGIN_BONUS_OPENED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PresentType.UNRECOGNIZED;
  }
}

export function presentTypeToJSON(object: PresentType): string {
  switch (object) {
    case PresentType.PRESENT_TYPE_PRESENT:
      return "PRESENT_TYPE_PRESENT";
    case PresentType.PRESENT_TYPE_PRESENT_OPENED:
      return "PRESENT_TYPE_PRESENT_OPENED";
    case PresentType.PRESENT_TYPE_LOGIN_BONUS:
      return "PRESENT_TYPE_LOGIN_BONUS";
    case PresentType.PRESENT_TYPE_LOGIN_BONUS_OPENED:
      return "PRESENT_TYPE_LOGIN_BONUS_OPENED";
    case PresentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CommonRequest {
  timestamp: Date | undefined;
  version: number;
  platform: Platform;
  environment: string;
}

export interface CommonResponse {
  code: number;
  accessToken: string;
  message: string;
  isReboot: boolean;
}

export interface ItemData {
  type: ItemType;
  masterId: string;
  num: number;
}

export interface PresentData {
  presentId: number;
  presentType: PresentType;
  createTime: Date | undefined;
  expireTime: Date | undefined;
  itemdata: ItemData | undefined;
  title: string;
  description: string;
}

function createBaseCommonRequest(): CommonRequest {
  return { timestamp: undefined, version: 0, platform: 0, environment: "" };
}

export const CommonRequest: MessageFns<CommonRequest> = {
  encode(message: CommonRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(10).fork()).join();
    }
    if (message.version !== 0) {
      writer.uint32(16).int32(message.version);
    }
    if (message.platform !== 0) {
      writer.uint32(24).int32(message.platform);
    }
    if (message.environment !== "") {
      writer.uint32(34).string(message.environment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.platform = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.environment = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonRequest {
    return {
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      platform: isSet(object.platform) ? platformFromJSON(object.platform) : 0,
      environment: isSet(object.environment) ? globalThis.String(object.environment) : "",
    };
  },

  toJSON(message: CommonRequest): unknown {
    const obj: any = {};
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.platform !== 0) {
      obj.platform = platformToJSON(message.platform);
    }
    if (message.environment !== "") {
      obj.environment = message.environment;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommonRequest>, I>>(base?: I): CommonRequest {
    return CommonRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommonRequest>, I>>(object: I): CommonRequest {
    const message = createBaseCommonRequest();
    message.timestamp = object.timestamp ?? undefined;
    message.version = object.version ?? 0;
    message.platform = object.platform ?? 0;
    message.environment = object.environment ?? "";
    return message;
  },
};

function createBaseCommonResponse(): CommonResponse {
  return { code: 0, accessToken: "", message: "", isReboot: false };
}

export const CommonResponse: MessageFns<CommonResponse> = {
  encode(message: CommonResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.accessToken !== "") {
      writer.uint32(18).string(message.accessToken);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    if (message.isReboot !== false) {
      writer.uint32(32).bool(message.isReboot);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isReboot = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      isReboot: isSet(object.isReboot) ? globalThis.Boolean(object.isReboot) : false,
    };
  },

  toJSON(message: CommonResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.isReboot !== false) {
      obj.isReboot = message.isReboot;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommonResponse>, I>>(base?: I): CommonResponse {
    return CommonResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommonResponse>, I>>(object: I): CommonResponse {
    const message = createBaseCommonResponse();
    message.code = object.code ?? 0;
    message.accessToken = object.accessToken ?? "";
    message.message = object.message ?? "";
    message.isReboot = object.isReboot ?? false;
    return message;
  },
};

function createBaseItemData(): ItemData {
  return { type: 0, masterId: "", num: 0 };
}

export const ItemData: MessageFns<ItemData> = {
  encode(message: ItemData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.masterId !== "") {
      writer.uint32(18).string(message.masterId);
    }
    if (message.num !== 0) {
      writer.uint32(24).int32(message.num);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ItemData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItemData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.masterId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.num = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ItemData {
    return {
      type: isSet(object.type) ? itemTypeFromJSON(object.type) : 0,
      masterId: isSet(object.masterId) ? globalThis.String(object.masterId) : "",
      num: isSet(object.num) ? globalThis.Number(object.num) : 0,
    };
  },

  toJSON(message: ItemData): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = itemTypeToJSON(message.type);
    }
    if (message.masterId !== "") {
      obj.masterId = message.masterId;
    }
    if (message.num !== 0) {
      obj.num = Math.round(message.num);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ItemData>, I>>(base?: I): ItemData {
    return ItemData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ItemData>, I>>(object: I): ItemData {
    const message = createBaseItemData();
    message.type = object.type ?? 0;
    message.masterId = object.masterId ?? "";
    message.num = object.num ?? 0;
    return message;
  },
};

function createBasePresentData(): PresentData {
  return {
    presentId: 0,
    presentType: 0,
    createTime: undefined,
    expireTime: undefined,
    itemdata: undefined,
    title: "",
    description: "",
  };
}

export const PresentData: MessageFns<PresentData> = {
  encode(message: PresentData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.presentId !== 0) {
      writer.uint32(8).int32(message.presentId);
    }
    if (message.presentType !== 0) {
      writer.uint32(16).int32(message.presentType);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(34).fork()).join();
    }
    if (message.itemdata !== undefined) {
      ItemData.encode(message.itemdata, writer.uint32(42).fork()).join();
    }
    if (message.title !== "") {
      writer.uint32(50).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PresentData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePresentData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.presentId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.presentType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.itemdata = ItemData.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PresentData {
    return {
      presentId: isSet(object.presentId) ? globalThis.Number(object.presentId) : 0,
      presentType: isSet(object.presentType) ? presentTypeFromJSON(object.presentType) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      itemdata: isSet(object.itemdata) ? ItemData.fromJSON(object.itemdata) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: PresentData): unknown {
    const obj: any = {};
    if (message.presentId !== 0) {
      obj.presentId = Math.round(message.presentId);
    }
    if (message.presentType !== 0) {
      obj.presentType = presentTypeToJSON(message.presentType);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.itemdata !== undefined) {
      obj.itemdata = ItemData.toJSON(message.itemdata);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PresentData>, I>>(base?: I): PresentData {
    return PresentData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PresentData>, I>>(object: I): PresentData {
    const message = createBasePresentData();
    message.presentId = object.presentId ?? 0;
    message.presentType = object.presentType ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.itemdata = (object.itemdata !== undefined && object.itemdata !== null)
      ? ItemData.fromPartial(object.itemdata)
      : undefined;
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
